#include "../includes/Board.h"

Board::Board(){
  this->player = 1;
  this->hashcode = 0;
  for(int i=0; i<5; i++){
    this->board.push_back(std::vector<int>(5));
  }
  for(int i=0; i<5; i++){
    for(int j=0; j<5; j++){
      if(i<2){
	this->board[i][j] = 1;
      }else if(i>=3 and i<5){
	this->board[i][j] = 2;
      }else{
	this->board[i][j] = 0;
      }
    }
  }
}

Board::Board(std::vector<std::vector<int>> board, int player){
  this->player = player;
  this->hashcode = 0;
  for(int i=0; i<5; i++){
    this->board.push_back(std::vector<int>(5));
  }
  for(int i=0; i<5; i++){
    for(int j=0; j<5; j++){
      this->board[i][j] = board[i][j];
    }
  }
}

Board::~Board(){
  this->board.clear();
}

void Board::init(){
  this->player = 1;
  this->hashcode = 0;
  for(int i=0; i<5; i++){
    for(int j=0; j<5; j++){
      if(i<2){
	this->board[i][j] = 1;
      }else if(i>=3 and i<5){
	this->board[i][j] = 2;
      }else{
	this->board[i][j] = 0;
      }
    }
  }
}

int Board::get_player(){
  return this->player;
}

std::vector<std::vector<int>> Board::get_board(){
  return this->board;
}

bool Board::valid(Move move) {
    // Not valid if not player's turn
    if (move.player != player) {
        return false;
    }

    // Not valid if no pawn of the player at the origin
    if (move.player != board[move.x1][move.y1]) {
        return false;
    }

    // Not valid if target is out of the board
    if (move.x2 < 0 || move.x2 >= 5) {
        return false;
    }
    if (move.y2 < 0 || move.y2 >= 5) {
        return false;
    }

    // Get the direction of deplacement
    int v = move.player * -1; // 1 if color -1, -1 if color 1

    // Not valid if move not on next row
    if (move.player == 1){
      if (move.x1 + 1 != move.x2) {
        return false;
      }
    }else{
      if (move.x1 - 1 != move.x2) {
	return false;
      }
    }

    // Valid if target is ahead and cell empty
    if (move.y1 == move.y2 && board[move.x2][move.y2] == 0) {
        return true;
    }

    // Valid if target is ahead left and there is an adversary pawn on cell or no pawn at all
    if (move.y2 == move.y1 - 1 && board[move.x2][move.y2] != move.player) {
        return true;
    }

    // Valid if target is ahead right and there is an adversary pawn on cell or no pawn at all
    if (move.y2 == move.y1 + 1 && board[move.x2][move.y2] != move.player) {
        return true;
    }
    
    return false;
}

std::vector<Move> Board::legal_moves(int player){
  std::vector<Move> legal_moves;
  for(int i=0; i<5; i++){
    for(int j=0; j<5; j++){
      if(this->board[i][j] == player){
	for(int k=-1; k<=1; k++){
	  for(int l=-1; l<=1; l++){
	    Move m(i, j, i+k, j+l, player);
	    if(valid(m)){
	      legal_moves.push_back(m);
	    }
	  }
	}
      }
    }
  }
  return legal_moves;
}

int Board::play(Move m, Zobrist zobrist){
  if(valid(m)){
    this->board[m.x1][m.y1] = 0;
    this->board[m.x2][m.y2] = m.player;
    if(m.player == 1){
      this->player = 2;
    }else{
      this->player = 1;
    }
    this->hashcode = zobrist.get_hash(this->hashcode,m);
    return 1;
  }
  return 0;
}

int Board::game_state(){
  std::vector<int> first_row = this->board[0];
  if(std::find(first_row.begin(), first_row.end(), 2) != first_row.end()){
    return 2;
  }
  std::vector<int> last_row = this->board[4];
  if(std::find(last_row.begin(), last_row.end(), 1) != last_row.end()){
    return 1;
  }
  return 0;
}

void Board::to_string(){
  std::cout << std::endl;
  for(int i=0; i<5; i++){
    for(int j=0; j<5; j++){
      std::cout << "|" << this->board[i][j];
      if(j==4){
	std::cout << "|";
      }
    }
    std::cout << std::endl;
  }
  std::cout << std::endl;
}

